#!/usr/bin/env ruby

# CLI for managing vmware instances

require 'rubygems'
require 'fog'
require 'thor'

Fog.mock!

# if iterating through instances is slow, then templates needs to be found by path -
# Fog::Compute[:vsphere].servers.all('path' => '/Datacenters/whatever/the/location/')
# no methods for finding just templates, considered just another vm instance

class VsphereCLI < Thor
  
  #@@f=Fog::Compute.new(:provider => "vsphere", :vsphere_username => "patrick", :vsphere_password=> "pipo1234**", :vsphere_server => "172.16.44.141")
  @@f=Fog::Compute.new(:provider => "vsphere")
  #attributes to display in tables
  @@attributes = [:name, :instance_uuid, :hypervisor, :is_a_template]
  
  desc "templates", "List all templates" 
  def templates
    result = Array.new
    @@f.servers.each do |x|
      result.push(x) if x.is_a_template == true
    end
    Formatador.display_table(result.map {|x| x.attributes}, @@attributes)
  end
  
  desc "vm", "List all virtual machines, including templates"
  def vm
    @@f.servers.table(@@attributes)
  end
  
  desc "instances", "List all virtual machine instances"
  def instances
    result = Array.new
    @@f.servers.each do |x|
      result.push(x) if x.is_a_template != true
    end
    Formatador.display_table(result.map {|x| x.attributes}, @@attributes)
  end
  
  # TODO
  desc "clone [INSTANCE_UUID] [NAME] ([PATH])", "Clone a vm"
  def clone(uuid=nil, name=nil, path=nil)
    if (uuid.nil?)  
      puts "please provide an template instance_uuid"
      exit
    end
    if (name.nil?)  
      puts "please provide an new instance name"
      exit
    end
    if (path.nil?)
      path = @@f.servers.get(uuid).path
    end
    new_vm=@@f.vm_clone('instance_uuid' => uuid, 'name' => name, 'path' => path)
  end
  
end

VsphereCLI.start
